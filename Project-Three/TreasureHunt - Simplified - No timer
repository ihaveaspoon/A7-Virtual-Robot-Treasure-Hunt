#Treasure Hunt - Part Two # A7 #
#Importing Libraries 
import pygame, random, sys, time, math, pygame.font, pygame.event, pygame.draw, string
import sys

#Creating colours
white = (255,255,255)
black = (0,0,0)

#Initialise Pygame/canvas
pygame.init()
pygame.display.set_caption('Treasure Hunt') # Set the Title of window
screen = pygame.display.set_mode([640,480]) #Set the screen size

bg = pygame.image.load("background.jpg").convert() #Import background
background_position = [0,0]
cfont = pygame.font.SysFont("Calibri", 24) #Set Font

#Creating Class for the Robot
class Robot:
    tR = [] #Robot list
    def __init__(self, x, y): #Initialise class
        self.x = x
        self.y = y
        self.ri = "robot.png"
    def create(self):   #Create function
        self.rbti = pygame.image.load(self.ri)
        self.rect = self.rbti.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Robot.tR.append((self.rbti, self.rect))
    #Function used to update screen
    def rob_update(self):
        screen.blit(self.rbti, self.rect)
    #Returns the position
    def position(self):
        return self.rect
    #drag function
    def drag(self, x, y):
        self.old_loc = self.rect
        self.rect.x = x
        self.rect.y = y
        for i in range(len(Robot.tR)):
            if Robot.tR[i][1] == self.old_loc:
                Robot.tR[i] = (self.rbti, self.rect)
    def move(self,x,y):
        self.rect = self.rect.move(x,y)
        self.rob_update()

#Creating class for the treasure

class Treasure:
    def __init__(self, x, y):
        self.x= x
        self.y= y
#Sub classes of Treasure
class Treasure1(Treasure):
    tC = []
    def __init__(self, x, y):
        Treasure.__init__(self, x, y)
        self.ci = "treasure.png"
    def create(self):
        self.cri = pygame.image.load(self.ci)
        self.rect = self.cri.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure1.tC.append((self.cri, self.rect))

class Treasure2(Treasure):
    tC2 = []
    def __init__(self, x, y):
        Treasure.__init__(self, x, y)
        self.bi = "treasure2.png"
    def create(self):
        self.bri = pygame.image.load(self.bi)
        self.rect = self.bri.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure2.tC2.append((self.bri, self.rect))


class Treasure3(Treasure):
    tC3 = []
    def __init__(self, x, y):
        Treasure.__init__(self, x, y)
        self.bi2 = "treasure3.png"
    def create(self):
        self.bri2 = pygame.image.load(self.bi2)
        self.rect = self.bri2.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure3.tC3.append((self.bri2, self.rect))

#Update function
def update(): #Background updates
    pygame.display.set_mode([640,480])
    screen.blit(bg, background_position)
    pygame.font.SysFont("Calibri", 24)
    screen.blit(cfont.render("Treasure:", 1, white),[10,40]) #Treasure text
    screen.blit(cfont.render("Score:", 1, white),[10,10]) #Score text
    screen.blit(cfont.render("Timer:", 1, white), [10,70])
    R1.rob_update()
    pygame.display.flip()

def update2():  #Treasure Update
    for c in Treasure1.tC:
        screen.blit(c[0], c[1])
    for b in Treasure2.tC2:
        screen.blit(b[0], b[1])
    for a in Treasure3.tC3:
        screen.blit(a[0], a[1])
        
    pygame.display.flip()


R1=Robot(100,100) #Create robot
R1.create()
robots = [R1]
update()


count = 5 # Limit the treasures placed
#While Loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.MOUSEBUTTONUP and drag:
            (mouseX, mouseY) = pygame.mouse.get_pos()
            for i in range(len(robots)):
                if robots[i].position() == collidedWith[1]:
                    robots[i].drag(mouseX, mouseY)
            update()
            update2()
            drag = False
            s = None
            
        elif event.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            for s in Robot.tR:
                if s[1].collidepoint(pos):
                    drag = True
                    collidedWith = s
                    
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1 and count > 0:
                (mouseX,mouseY) = pygame.mouse.get_pos()
                Treasure1(mouseX,mouseY).create()
                count = count - 1
                update2()
            if event.key == pygame.K_2 and count > 0:
                (mouseX,mouseY) = pygame.mouse.get_pos()
                Treasure2(mouseX,mouseY).create()
                count = count -1
                update2()
            if event.key == pygame.K_3 and count > 0:
                (mouseX,mouseY) = pygame.mouse.get_pos()
                Treasure3(mouseX,mouseY).create()
                count = count - 1
                update2()
            if event.key == pygame.K_ESCAPE:    # pressing escape quit
                  pygame.quit()
                  sys.exit()
            if event.key == pygame.K_SPACE:
                for i in range(1,5):
                    R1.move(0,10)
                    update()
                    update2()
