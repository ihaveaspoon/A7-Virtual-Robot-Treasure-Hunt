import pygame, pygame.font, pygame.event, pygame.draw, string, pygame.time
from pygame.locals import *
import sys
pygame.init()
      
# Define some colors
black    = (   0,   0,   0)
white    = ( 255, 255, 255)
green    = (   0, 255,   0)
red      = ( 255,   0,   0)
  

screen = pygame.display.set_mode((1000,100))
class Tbox:
      def get_key(self):
            while True:
                  for event in pygame.event.get(): 
                        if event.type == pygame.QUIT:
                              self.quit=pygame.quit()
                              self.sys=sys.exit()
                        elif event.type == pygame.KEYDOWN:
                              if event.key == K_ESCAPE:       # pressing escape quit
                                    self.quit=pygame.quit()
                                    self.sys=sys.exit()
                              return event.key
                        else:
                              pass
      def display_box(self,screen, message):
            self.screen = screen
            self.m = message
            self.fontobject = pygame.font.Font(None,36)
            "Print a message in a box in the middle of the screen"

            pygame.draw.rect(self.screen, (0,0,0),(50,20,900,100), 0)
            #the out line of the box
            pygame.draw.rect(self.screen, (255,255,255),(48,18,800,30), 1)
            if len(self.m) != 0:
                  screen.blit(self.fontobject.render(self.m, 1, (255,0,0)),(50, 20))
            pygame.display.flip()

      def ask(self,screen):
            self.screen = screen
            self.q = "Set the timer (seconds): "
            "ask(screen, question) -> answer"
            pygame.font.init()
            self.current_integer = []
            Tbox.display_box(self,screen, self.q  + string.join(self.current_integer))
            while 1:
                  inkey = Tbox.get_key(self)
                  if inkey == K_BACKSPACE:
                        self.current_integer = self.current_integer[0:-1]
                  elif inkey == K_RETURN:
                        a = int(string.join(self.current_integer,""))
                        print a
                        break
                  elif inkey == K_MINUS:
                        self.current_integer.append("_")
                  elif inkey <= 127:
                        self.current_integer.append(chr(inkey))
                  Tbox.display_box(self,screen, self.q  + string.join(self.current_integer))
            return string.join(self.current_integer,"")

      def SD(self):
            self.a = int(string.join(self.current_integer,""))
            print self.a


class timer(Tbox):
# Set the screen background
    def __init__(self):
          Tbox.ask(self,screen)
          Tbox.display_box(self,screen,"")
          Tbox.SD(self)
          self.size=[700, 500]
          self.mscreen = pygame.display.set_mode(self.size)
          pygame.display.set_caption("Treasure Hunt")

          # Used to manage how fast the screen updates

          self.clock = pygame.time.Clock()
          self.font = pygame.font.Font(None, 25)
          self.frame_count = 0
          self.frame_rate = 60
          self.s_time = self.a
          self.done =False
    def wait(self):
          while True:
                  for event in pygame.event.get():
                        if event.type == QUIT:
                              pygame.quit()
                              sys.exit()
                        elif event.type == pygame.KEYDOWN:
                              if event.key == K_SPACE:
                                    return
                                    #pygame.event.get_blocked(K_SPACE)
                              



    # Main Program Loop 
    def update(self):
          self.mscreen.fill(white)
          pygame.display.flip()
          TW.wait()
          
          
          while not self.done:
            for event in pygame.event.get(): # User did something
                  
                  if event.type == pygame.QUIT: # If user clicked close
                        self.done = True # Flag that we are done so we exit this loop
                        self.quit=pygame.quit()
                        self.sys=sys.exit()
                  elif event.type == pygame.KEYDOWN:
                        if event.key == K_ESCAPE:           # pressing escape quit
                              self.quit=pygame.quit()
                              self.sys=sys.exit()
                        return
        
            
            '''for event in pygame.event.wait():
                  if event.key == K_SPACE:
                        break'''

            self.mscreen.fill(white)
            # Calculate total seconds
            self.total_seconds = self.s_time - (self.frame_count // self.frame_rate)
            if self.total_seconds < 0:
                self.total_seconds = 0
                pygame.quit ()
                sys.exit()
                break
                
     
            # Divide by 60 to get total minutes
            self.minutes = self.total_seconds // 60
     
            # Use modulus (remainder) to get seconds
            self.seconds = self.total_seconds % 60
            self.output_string = "Time left: {0:02}:{1:02}".format(self.minutes, self.seconds)
            #self.output_string = ("Time left: ", self.minutes, self.seconds)
            # Blit to the screen
            self.text = self.font.render(self.output_string, 1, ( 255,   0,   0))

            #place the timer 
            self.mscreen.blit(self.text, [400, 280])
         
            self.frame_count = self.frame_count + 1
            # Limit to 20 frames per second
            self.clock.tick(self.frame_rate)
      
            # Update the screen
            pygame.display.flip()
            
      

TW=timer()
TW.update()
pygame.display.flip()
