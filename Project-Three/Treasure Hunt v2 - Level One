#Treasure Hunt - Part Two # A7 #
#Importing Libraries 
import pygame, random, sys, time, math

#Creating colours
white = (255,255,255)
blue = (176,224,230)
dblue = (0,129,242)

#Initialise Pygame/canvas
pygame.init()
pygame.display.set_caption('Treasure Hunt') # Set the Title of window
screen = pygame.display.set_mode([640,580]) #Set the screen size
screen.fill(white)# Set the screen to white

#Import background
bg = pygame.image.load("kart.jpg").convert()
background_position = [0,0]

#Descripition Positions
start = 150,480,200,200
stop = 150,550,150,50

# Set fonts 
font = pygame.font.SysFont("monospace", 40) # Time font
bfont = pygame.font.SysFont("monospace", 30) # Button font
cfont = pygame.font.SysFont("monospace", 20) # Score Font

#Adding descriptions to screen
pygame.draw.rect(screen,blue,start)
screen.blit(bfont.render("Treasure:", 1, dblue),[160,500])
screen.blit(cfont.render("Score:", 1, dblue),[20,520])
pygame.draw.rect(screen,blue,stop)

#Creating Class for the Robot
class Robot:
    tR = []
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.ri = "player_car.png"
    def create(self):
        self.rbti = pygame.image.load(self.ri)
        self.rect = self.rbti.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Robot.tR.append((self.rbti, self.rect))
    def blitter(self):
        screen.blit(self.rbti, self.rect)
    def whoami(self):
        return self.rect
    def move(self, x, y):
        self.old_loc = self.rect
        self.rect.x = x
        self.rect.y = y
        for i in range(len(Robot.tR)):
            if Robot.tR[i][1] == self.old_loc:
                Robot.tR[i] = (self.rbti, self.rect)

class Treasure:
    tL = []
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.ti = "traffic_cone.png"
    def create(self):
        self.tri = pygame.image.load(self.ti)
        self.rect = self.tri.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure.tL.append((self.tri, self.rect))
    def update(self):
        screen.blit(self.tri, self.rect)


def update():
    screen.blit(bg, background_position)
    R1.blitter()
    pygame.draw.rect(screen,blue,start)
    screen.blit(bfont.render("Treasure:", 1, dblue),[160,500])
    screen.blit(cfont.render("Score:", 1, dblue),[20,520])
    pygame.draw.rect(screen,blue,stop)
    for r in Robot.tR:
        screen.blit(r[0], r[1])
    for t in Treasure.tL:
        screen.blit(t[0], t[1])
    pygame.display.flip()


#Instances
R1 = Robot(10,10)
R1.create()
update()
move = False
robots = [R1]

#While Loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.MOUSEBUTTONUP and move:
            (mouseX, mouseY) = pygame.mouse.get_pos()
            for i in range(len(robots)):
                if robots[i].whoami() == collidedWith[1]:
                    robots[i].move(mouseX, mouseY)
            update()
            move = False
            s = None
            
        elif event.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            for s in Robot.tR:
                if s[1].collidepoint(pos):
                    move = True
                    collidedWith = s
                    
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1:
                (X,Y) = pygame.mouse.get_pos()
                Treasure(X,Y).create()
                update()
                
