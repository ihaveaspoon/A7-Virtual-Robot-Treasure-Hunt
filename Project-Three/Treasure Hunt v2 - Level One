#Treasure Hunt - Part Two # A7 #
#Importing Libraries 
import pygame, random, sys, time, math, pygame.font, pygame.event, pygame.draw, string
import sys

#Creating colours
white = (255,255,255)
black    = (   0,   0,   0)
green    = (   0, 255,   0)
red      = ( 255,   0,   0)

#Initialise Pygame/canvas
pygame.init()
pygame.display.set_caption('Treasure Hunt') # Set the Title of window
size = [640,480]
screen = pygame.display.set_mode(size) #Set the screen size
screen.fill(white)# Set the screen to white

#Import background
bg = pygame.image.load("background.jpg").convert()
background_position = [0,0]

#Descripition Background position
back1 = 150,480,200,200

#Set Font
cfont = pygame.font.SysFont("Calibri", 24)

#Creating Class for the Robot
class Robot:
    #Robot list
    tR = []
    #Initialise class
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.ri = "robot.png"
    #Create function
    def create(self):
        self.rbti = pygame.image.load(self.ri)
        self.rect = self.rbti.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Robot.tR.append((self.rbti, self.rect))
    #Function used to update screen
    def rob_update(self):
        screen.blit(self.rbti, self.rect)
    #Returns the position
    def position(self):
        return self.rect
    #Move function
    def move(self, x, y):
        self.old_loc = self.rect
        self.rect.x = x
        self.rect.y = y
        for i in range(len(Robot.tR)):
            if Robot.tR[i][1] == self.old_loc:
                Robot.tR[i] = (self.rbti, self.rect)

#Creating class for the treasure

class Treasure:
    def __init__(self, x, y):
        self.x= x
        self.y= y
#Sub classes of Treasure
class Treasure1(Treasure):
    tC = []
    def __init__(self, x, y):
        Treasure.__init__(self, x, y)
        self.x = x
        self.y = y
        self.ci = "treasure.png"
    def create(self):
        self.cri = pygame.image.load(self.ci)
        self.rect = self.cri.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure1.tC.append((self.cri, self.rect))
    def update(self):
        screen.blit(self.cri, self.rect)

class Treasure2(Treasure):
    tC2 = []
    def __init__(self, x, y):
        Treasure.__init__(self, x, y)
        self.x = x
        self.y = y
        self.bi = "treasure2.png"
    def create(self):
        self.bri = pygame.image.load(self.bi)
        self.rect = self.bri.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure2.tC2.append((self.bri, self.rect))
    def update(self):
        screen.blit(self.bri, self.rect)

class Treasure3(Treasure):
    tC3 = []
    def __init__(self, x, y):
        Treasure.__init__(self, x, y)
        self.x = x
        self.y = y
        self.bi2 = "treasure3.png"
    def create(self):
        self.bri2 = pygame.image.load(self.bi2)
        self.rect = self.bri2.get_rect()
        self.rect.x = self.x
        self.rect.y = self.y
        Treasure3.tC3.append((self.bri2, self.rect))
    def update(self):
        screen.blit(self.bri2, self.rect)


class Tbox:
    def get_key(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.quit=pygame.quit()
                    self.sys=sys.exit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:# pressing escape quit
                        self.quit=pygame.quit()
                        self.sys=sys.exit()
                    return event.key
                else:
                    pass
    def display_box(self,screen, message):
        self.screen = pygame.display.set_mode((1000,100))
        self.m = message
        self.fontobject = pygame.font.Font(None,36)
        "Print a message in a box in the middle of the screen"

        pygame.draw.rect(self.screen, (0,0,0),(50,20,900,100), 0)
        #the out line of the box
        pygame.draw.rect(self.screen, (white),(48,18,800,30), 1)
        if len(self.m) != 0:
            screen.blit(self.fontobject.render(self.m, 1, (255,0,0)),(50, 20))
        pygame.display.flip()

    def ask(self,screen):
        self.screen = pygame.display.set_mode((1000,100))
        self.q = "Set the timer (seconds): "
        "ask(screen, question) -> answer"
        pygame.font.init()
        self.current_integer = []
        Tbox.display_box(self,screen, self.q  + string.join(self.current_integer))
        while 1:
            inkey = Tbox.get_key(self)
            if inkey == pygame.K_BACKSPACE:
                self.current_integer = self.current_integer[0:-1]
            elif inkey == pygame.K_RETURN:
                a = int(string.join(self.current_integer,""))
                print a
                break
                
            elif inkey == pygame.K_MINUS:
                self.current_integer.append("_")
            elif inkey <= 127:
                self.current_integer.append(chr(inkey))
            Tbox.display_box(self,screen, self.q  + string.join(self.current_integer))
        return string.join(self.current_integer,"")
    def SD(self):
        self.a = int(string.join(self.current_integer,""))
        print self.a
        return self.a

robotx = pygame.image.load("robot.png").convert()
def timer():
      Tbox()
      size = [640,480]
      screen = pygame.display.set_mode(size)
      pygame.display.set_caption("Treasure Hunt")
      bg = pygame.image.load("background.jpg").convert()
      bg_position = [0,0]
      clock = pygame.time.Clock()
      font = pygame.font.Font(None, 24)
      frame_count = 0
      frame_rate = 600
      s_time = int(TW.SD())
      done =False

      while not done:
            for event in pygame.event.get(): # User did something
                  if event.type == pygame.QUIT: # If user clicked close
                        done = True # Flag that we are done so we exit this loop
                        pygame.quit()
                        sys.exit()
                  elif event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:           # pressing escape quit
                              pygame.quit()
                              sys.exit()
                        return
        
            screen.fill(white)
            # Calculate total seconds
            total_seconds = s_time - (frame_count // frame_rate)
            if total_seconds < 0:
                  total_seconds = 0
                  pygame.quit ()
                  sys.exit()
                  break
                
            # Divide by 60 to get total minutes
            minutes = total_seconds // 60
     
            # Use modulus (remainder) to get seconds
            seconds = total_seconds % 60
            output_string = "Timer: {0:02}:{1:02}".format(minutes, seconds)

            # Blit to the screen
            text = font.render(output_string, 1, (white))

            #place the timer
            update()
            screen.blit(text, [10, 70])
            frame_count = frame_count + 1
            # Limit to 20 frames per second
            clock.tick(frame_rate)
      
            # Update the screen
            pygame.display.flip()

#Update function
def update():
    pygame.display.set_mode(size)
    screen.fill(white)
    screen.blit(bg, background_position)
    screen.blit(cfont.render("Treasure:", 1, white),[10,40]) #Treasure text
    screen.blit(cfont.render("Score:", 1, white),[10,10]) #Score text
    R1.rob_update()
    for r in Robot.tR:
        screen.blit(r[0], r[1])
    for c in Treasure1.tC:
        screen.blit(c[0], c[1])
    for b in Treasure2.tC2:
        screen.blit(b[0], b[1])
    for a in Treasure3.tC3:
        screen.blit(a[0], a[1])
        
    pygame.display.flip()

#Instances
TW=Tbox()
TW.ask(pygame.display.set_mode((1000,100)))
TW.display_box(pygame.display.set_mode((1000,100)),"")
TW.SD()
R1 = Robot(100,100)
R1.create()
update()
move = False
robots = [R1]
count = 5

#While Loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.MOUSEBUTTONUP and move:
            (mouseX, mouseY) = pygame.mouse.get_pos()
            for i in range(len(robots)):
                if robots[i].position() == collidedWith[1]:
                    robots[i].move(mouseX, mouseY)
            update()
            move = False
            s = None
            
        elif event.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            for s in Robot.tR:
                if s[1].collidepoint(pos):
                    move = True
                    collidedWith = s
                    
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1 and count > 0:
                (mouseX,mouseY) = pygame.mouse.get_pos()
                Treasure1(mouseX,mouseY).create()
                count = count - 1
                update()
            if event.key == pygame.K_2 and count > 0:
                (mouseX,mouseY) = pygame.mouse.get_pos()
                Treasure2(mouseX,mouseY).create()
                count = count -1
                screen.blit(robotx, (100,110))
                update()
            if event.key == pygame.K_3 and count > 0:
                (mouseX,mouseY) = pygame.mouse.get_pos()
                Treasure3(mouseX,mouseY).create()
                count = count - 1
                update()
            if event.key == pygame.K_SPACE:
                update()
                timer()
            if event.key == pygame.K_ESCAPE:    # pressing escape quit
                  pygame.quit()
                  sys.exit()
